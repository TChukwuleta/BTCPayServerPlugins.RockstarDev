@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Services
@using BTCPayServer.Services.Mails
@inject SettingsRepository _SettingsRepository
@model BTCPayServer.RockstarDev.Plugins.Payroll.ViewModels.PayrollSettingViewModel
@{
    ViewData.SetActivePage("VendorPay", "Update Plugin Settings", "VendorPay");
}

<form method="post" asp-action="Settings">
    <div class="sticky-header d-flex align-items-center justify-content-between">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <input type="submit" value="Save Changes" class="btn btn-primary" id="Edit" />
    </div>

    <partial name="_StatusMessage" />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group d-flex align-items-center">
                <input asp-for="MakeInvoiceFileOptional" type="checkbox" class="btcpay-toggle me-3" />
                <label asp-for="MakeInvoiceFileOptional" class="form-label mb-0 me-1"></label>
                <span asp-validation-for="MakeInvoiceFileOptional" class="text-danger"></span>
            </div>
            <div class="form-group d-flex align-items-center">
                <input asp-for="PurchaseOrdersRequired" type="checkbox" class="btcpay-toggle me-3" />
                <label asp-for="PurchaseOrdersRequired" class="form-label mb-0 me-1"></label>
                <span asp-validation-for="PurchaseOrdersRequired" class="text-danger"></span>
            </div>

            <h3>Emails</h3>
            <div class="form-group d-flex align-items-center">
                @{
                    var emailSettings = (await _SettingsRepository.GetSettingAsync<EmailSettings>()) ?? new EmailSettings();
                    var requiresConfirmedEmail = (bool)ViewData["RequiresConfirmedEmail"];
                    var isEmailConfigured = emailSettings.IsComplete() || requiresConfirmedEmail;
                }
                <input asp-for="EmailVendorOnInvoicePaid" type="checkbox" class="btcpay-toggle me-3" id="emailToggle" disabled="@(isEmailConfigured ? null : "disabled")" />
                <div>
                    <label asp-for="EmailVendorOnInvoicePaid" class="form-check-label"></label>
                    <span asp-validation-for="EmailVendorOnInvoicePaid" class="text-danger"></span> 
                    @if (!isEmailConfigured)
                    {
                        <div class="text-secondary">
                            <span text-translate="true">Your email server has not been configured.</span>
                            <a asp-controller="UIServer" asp-action="Emails" text-translate="true">Please configure it first.</a>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group" id="emailTemplateGroup" style="display: none;">
                <label asp-for="EmailTemplate" class="form-label">Customize Email Template</label>
                <textarea asp-for="EmailTemplate" class="form-control" rows="3"></textarea>
                <span asp-validation-for="EmailTemplate" class="text-danger"></span>
            </div>

        </div>
    </div>
</form>


@section PageFootContent {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const emailToggle = document.getElementById('emailToggle');
            const emailTemplateGroup = document.getElementById('emailTemplateGroup');
            const toggleEmailTemplateVisibility = () => {
                emailTemplateGroup.style.display = emailToggle.checked ? 'block' : 'none';
            };
            emailToggle.addEventListener('change', toggleEmailTemplateVisibility);
            toggleEmailTemplateVisibility();
        });
    </script>
}